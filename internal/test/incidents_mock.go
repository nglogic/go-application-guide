// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nglogic/go-application-guide/internal/app/bikerental (interfaces: BikeIncidentsService)

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bikerental "github.com/nglogic/go-application-guide/internal/app/bikerental"
)

// MockBikeIncidentsService is a mock of BikeIncidentsService interface.
type MockBikeIncidentsService struct {
	ctrl     *gomock.Controller
	recorder *MockBikeIncidentsServiceMockRecorder
}

// MockBikeIncidentsServiceMockRecorder is the mock recorder for MockBikeIncidentsService.
type MockBikeIncidentsServiceMockRecorder struct {
	mock *MockBikeIncidentsService
}

// NewMockBikeIncidentsService creates a new mock instance.
func NewMockBikeIncidentsService(ctrl *gomock.Controller) *MockBikeIncidentsService {
	mock := &MockBikeIncidentsService{ctrl: ctrl}
	mock.recorder = &MockBikeIncidentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBikeIncidentsService) EXPECT() *MockBikeIncidentsServiceMockRecorder {
	return m.recorder
}

// GetIncidents mocks base method.
func (m *MockBikeIncidentsService) GetIncidents(arg0 context.Context, arg1 bikerental.BikeIncidentsRequest) (*bikerental.BikeIncidentsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidents", arg0, arg1)
	ret0, _ := ret[0].(*bikerental.BikeIncidentsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidents indicates an expected call of GetIncidents.
func (mr *MockBikeIncidentsServiceMockRecorder) GetIncidents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidents", reflect.TypeOf((*MockBikeIncidentsService)(nil).GetIncidents), arg0, arg1)
}

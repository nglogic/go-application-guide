// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nglogic/go-application-guide/internal/app/bikerental (interfaces: WeatherService)

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bikerental "github.com/nglogic/go-application-guide/internal/app/bikerental"
)

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// GetWeather mocks base method.
func (m *MockWeatherService) GetWeather(arg0 context.Context, arg1 bikerental.WeatherRequest) (*bikerental.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", arg0, arg1)
	ret0, _ := ret[0].(*bikerental.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather.
func (mr *MockWeatherServiceMockRecorder) GetWeather(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeatherService)(nil).GetWeather), arg0, arg1)
}
